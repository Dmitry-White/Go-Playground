# Read about SQL Injection vulnerability
https://owasp.org/www-community/attacks/SQL_Injection
https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html

# Start a Docker container with PostgreSQL DB process
docker run \
    -e POSTGRES_HOST_AUTH_METHOD=trust \
    -p 5432:5432 \
    postgres:13-alpine

# Start a Docker container to connect to DB shell from
docker run \
    --rm -it \
    --network=host \
    postgres:13-alpine \
    psql -U postgres -h localhost

# Inside DB shell use
\d
# to explore tables, and
SELECT * FROM logs;
# to explore the logs table

# Execute Go code with different payloads
go run . < log_hacky.txt
go run . < log_safe.txt

# Observe that with "hacky" strategy the table is vulnerable
# to SQL Injection from log_hacky.txt,
# while with "safe" strategy both logs are escaped and appear in the DB.
